@page "/addalumno"
@page "/updatealumno/{Id}"
@using FragataAssist.Services.AlumnoService
@using FragataAssist.Services.AsistenciaService
@using FragataAssist.Data
@using Microsoft.Maui.Graphics.Platform
@inject IAlumnoRepository _alumnoRepository
@inject IAsistenciaRepository _asistenciaRepository
@inject NavigationManager navigationManager

<button type="submit" class="btn btn-sm btn-danger" @onclick="BackToList">Regresar</button>


<div class="card margin-top">
    <div class="card-header">
        <h5>Alumno</h5>
    </div>
<div class="row justify-content-center card-body">
    <div class="col-md-3">
            <div class=" photocontainer">
            <img src="@imageSource" class="avatar"/>
            </div>
        @if (imageSource == DefaultPhoto)
        {
            <button type="submit" class="btn btn-sm btn-success btnphoto" @onclick="TakePhoto">Tomar Foto</button>
        }
        else
        {
            <button type="submit" class="btn btn-sm btn-danger btnphoto" @onclick="DeletePhoto">Borrar Foto</button>
        }
    </div>
    <div class="col-md-6">

        <div class="mb-3">
            <label class="form-label">Cedula</label>
            @if (Id == "" || Id == null)

            {
                <input type="text" @bind="alumnId" class="form-control" placeholder="Id" />
            }
            else
            {
                <input type="text" @bind="alumnId" class="form-control" placeholder="Id" readonly />
            }

        </div>
        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <input type="text" @bind="alumndNombre" class="form-control" placeholder="Name" />
            @*            @if (this.Id == "")
            {
                <input type="text" @bind="alumndNombre" class="form-control" placeholder="Name" />
            }
            else
            {
                <input type="text" @bind="alumndNombre" class="form-control" placeholder="Name" readonly />
            } *@

        </div>
        <div class="mb-3">
            <label class="form-label">Activo</label>
            <input type="checkbox" @bind="alumnActivo" />
        </div>


        <button type="submit" class="btn btn-sm btn-success" @onclick="AddAlumno">Agregar</button>
    </div>
</div>
</div>


@if ( Id != null)
{ 
<div class="card margin-top">
    <div class="card-header">
        <h5>Asistencia</h5>
    </div>
    <div class="row justify-content-center card-body">
        <table class="table">
            <thead>
                <tr>
                    <th>Cedula</th>
                    <th>Hora</th>
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var asistencia in asistenciaList)
                {
                    <tr>
                        <td>@asistencia.Hora.ToShortDateString() @asistencia.Hora.ToShortTimeString()</td>

                        @if (@asistencia.EntradaSalida)

                        {
                            <td>Entrada</td>
                        }
                        else
                        {
                            <td>Salida</td>
                        }
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private string alumnId = "";
    private string alumndNombre = "";
    private bool alumnActivo = true;
    private string DefaultPhoto = "images/FragataLogo.png";
    private string imageSource = "";
    private string photofilepath = "";
    private IEnumerable<Asistencia> asistenciaList = Enumerable.Empty<Asistencia>();


    protected async override void OnInitialized()
    {
        base.OnInitialized();
        imageSource = DefaultPhoto;
        string path = Directory.GetCurrentDirectory();

        alumnId = Id;
        if (alumnId != "" && alumnId != null)
        {
            asistenciaList = await _asistenciaRepository.GetAllAsistenciasAsync();
            var response = await _alumnoRepository.GetAlumnoAsync(alumnId);
            alumnId = response.IdAlumno;
            alumndNombre = response.Nombre;
            alumnActivo = response.Activo;
            imageSource = response.Foto;
            photofilepath = response.PathFoto;
            this.StateHasChanged();
        }
    }

    public async void AddAlumno()
    {
        var alumno = new Alumno();
        alumno.IdAlumno = alumnId;
        alumno.Nombre = alumndNombre;
        alumno.Activo = alumnActivo;
        alumno.Foto = imageSource;
        alumno.PathFoto = photofilepath;

        var alreadyExist = await _alumnoRepository.GetAlumnoAsync(alumnId);

        if (alreadyExist != null && alreadyExist.Nombre != alumno.Nombre)
        {
            await App.Current.MainPage.DisplayAlert("Error", "No se puede guardar más de un usuario con la misma cedula", "Ok");
        }
        else
        {

            var response = await _alumnoRepository.AddUpdateAlumnoAsync(alumno);

            if (response)
            {
                if (Id == "" || Id == null)
                {
                    await App.Current.MainPage.DisplayAlert("Saved", "Saved Success", "Ok");
                    navigationManager.NavigateTo("Alumnolist");

                }
                else
                {
                    await App.Current.MainPage.DisplayAlert("Updated", "Update Success", "Ok");
                    navigationManager.NavigateTo("Alumnolist");

                }
            }
            else
            {
                await App.Current.MainPage.DisplayAlert("Saved", "Saved Failed", "Ok");
            }
        }
    }

    public void BackToList()
    {
        DeleteData();
        navigationManager.NavigateTo("Alumnolist");
    }

    public async void TakePhoto()
    {
        if (MediaPicker.Default.IsCaptureSupported)
        {
            FileResult photo = await MediaPicker.Default.CapturePhotoAsync();
            try
            {
                if (photo != null)
                {
                    // save the file into local storage
                    string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

                    using FileStream localFileStream = File.OpenWrite(localFilePath);

                    using Stream sourceStream = await photo.OpenReadAsync();
                    Microsoft.Maui.Graphics.IImage image = PlatformImage.FromStream(sourceStream);
                    var resizeImg = image.Resize(400, 400);
                    var str = resizeImg.AsStream();
                    imageSource = localFilePath;
                    photofilepath = localFilePath;

                    await str.CopyToAsync(localFileStream);
                    // await sourceStream.CopyToAsync(localFileStream);
                    str.Dispose();
                    // sourceStream.Dispose();
                    localFileStream.Dispose();
                    var imageBytes = File.ReadAllBytes(localFilePath);
                    imageSource = Convert.ToBase64String(imageBytes);
                    imageSource = string.Format("data:image/png;base64,{0}", imageSource);
                    this.StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                var e = ex;
                throw;
            }

        }
    }

    public async void DeletePhoto()
    {
        DeleteData();
        this.StateHasChanged();
    }

    private void DeleteData()
    {
        if (photofilepath != "")
        {
            File.Delete(photofilepath);
            photofilepath = "";
            imageSource = DefaultPhoto;
        }
            
    }


}
